{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/yonko/Development/code/phase2/code-challenge/phase-2-hooks-code-challenge-bank-of-flatiron-Yonkothe5th/src/components/AccountContainer.js\",\n    _s = $RefreshSig$();\n\n// import React from \"react\";\n// import TransactionsList from \"./TransactionsList\";\n// import Search from \"./Search\";\n// import AddTransactionForm from \"./AddTransactionForm\";\n// function AccountContainer() {\n//   return (\n//     <div>\n//       <Search />\n//       <AddTransactionForm />\n//       <TransactionsList />\n//     </div>\n//   );\n// }\n// export default AccountContainer;\nimport React, { useState, useEffect } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport AddTransactionForm from \"./AddTransactionForm\";\nimport Search from \"./Search\";\n\nfunction AccountContainer() {\n  _s();\n\n  const [transactions, setTransactions] = useState([]);\n  const [filteredTransactions, setFilteredTransactions] = useState([]); // Fetch transactions from the backend URL\n\n  useEffect(() => {\n    fetch(\"http://localhost:8001/transactions\").then(response => response.json()).then(data => {\n      setTransactions(data);\n      setFilteredTransactions(data);\n    }).catch(error => console.error(\"Error fetching transactions:\", error));\n  }, []); // Function to add a new transaction to the list\n\n  const addTransaction = newTransaction => {\n    setTransactions(prevTransactions => [...prevTransactions, newTransaction]); // Update filtered transactions to include the new transaction\n\n    setFilteredTransactions(prevTransactions => [...prevTransactions, newTransaction]);\n  };\n\n  const handleSearch = term => {\n    // Filter transactions based on the search term\n    const filtered = transactions.filter(transaction => transaction.description.toLowerCase().includes(term.toLowerCase()));\n    setFilteredTransactions(filtered);\n  }; // Function to delete a transaction from the list\n\n\n  const handleDelete = id => {\n    // Filter out the deleted transaction\n    const updatedTransactions = transactions.filter(transaction => transaction.id !== id);\n    setTransactions(updatedTransactions);\n    setFilteredTransactions(updatedTransactions); // Delete the transaction from the backend\n\n    fetch(`http://localhost:8001/transactions/${id}`, {\n      method: \"DELETE\"\n    }).then(response => response.json()).then(data => console.log(\"Transaction deleted successfully:\", data)).catch(error => console.error(\"Error deleting transaction:\", error));\n  }; // Function to sort transactions\n\n\n  const handleSort = (key, order) => {\n    const sorted = [...filteredTransactions].sort((a, b) => {\n      const valueA = a[key].toLowerCase();\n      const valueB = b[key].toLowerCase();\n      return order === \"asc\" ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA);\n    });\n    setFilteredTransactions(sorted);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTransactionForm, {\n      transactions: transactions,\n      addTransaction: addTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionsList, {\n      transactions: filteredTransactions,\n      onDelete: handleDelete,\n      onSort: handleSort\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountContainer, \"7na4B7SK+6CvvEHetQqCQKoiewE=\");\n\n_c = AccountContainer;\nexport default AccountContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountContainer\");","map":{"version":3,"sources":["/Users/yonko/Development/code/phase2/code-challenge/phase-2-hooks-code-challenge-bank-of-flatiron-Yonkothe5th/src/components/AccountContainer.js"],"names":["React","useState","useEffect","TransactionsList","AddTransactionForm","Search","AccountContainer","transactions","setTransactions","filteredTransactions","setFilteredTransactions","fetch","then","response","json","data","catch","error","console","addTransaction","newTransaction","prevTransactions","handleSearch","term","filtered","filter","transaction","description","toLowerCase","includes","handleDelete","id","updatedTransactions","method","log","handleSort","key","order","sorted","sort","a","b","valueA","valueB","localeCompare"],"mappings":"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","sourcesContent":["// import React from \"react\";\n// import TransactionsList from \"./TransactionsList\";\n// import Search from \"./Search\";\n// import AddTransactionForm from \"./AddTransactionForm\";\n\n// function AccountContainer() {\n//   return (\n//     <div>\n//       <Search />\n//       <AddTransactionForm />\n//       <TransactionsList />\n//     </div>\n//   );\n// }\n\n// export default AccountContainer;\n\n\nimport React, { useState, useEffect } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport AddTransactionForm from \"./AddTransactionForm\";\nimport Search from \"./Search\";\n\nfunction AccountContainer() {\n  \n  const [transactions, setTransactions] = useState([]);\n  const [filteredTransactions, setFilteredTransactions] = useState([]);\n\n  // Fetch transactions from the backend URL\n  useEffect(() => {\n    fetch(\"http://localhost:8001/transactions\")\n      .then(response => response.json())\n      .then(data => {\n        setTransactions(data);\n        setFilteredTransactions(data);\n      })\n      .catch(error => console.error(\"Error fetching transactions:\", error));\n  }, []);\n\n  // Function to add a new transaction to the list\n  const addTransaction = (newTransaction) => {\n    setTransactions((prevTransactions) => [...prevTransactions, newTransaction]);\n\n    // Update filtered transactions to include the new transaction\n    setFilteredTransactions((prevTransactions) => [...prevTransactions, newTransaction]);\n  };\n\n  const handleSearch = (term) => {\n    // Filter transactions based on the search term\n    const filtered = transactions.filter(transaction =>\n      transaction.description.toLowerCase().includes(term.toLowerCase())\n    );\n    setFilteredTransactions(filtered);\n  }\n\n  // Function to delete a transaction from the list\n  const handleDelete = (id) => {\n    // Filter out the deleted transaction\n    const updatedTransactions = transactions.filter(transaction => transaction.id !== id);\n    setTransactions(updatedTransactions);\n    setFilteredTransactions(updatedTransactions);\n\n    // Delete the transaction from the backend\n    fetch(`http://localhost:8001/transactions/${id}`, {\n      method: \"DELETE\",\n    })\n      .then(response => response.json())\n      .then(data => console.log(\"Transaction deleted successfully:\", data))\n      .catch(error => console.error(\"Error deleting transaction:\", error));\n  };\n\n    // Function to sort transactions\n    const handleSort = (key, order) => {\n      const sorted = [...filteredTransactions].sort((a, b) => {\n        const valueA = a[key].toLowerCase();\n        const valueB = b[key].toLowerCase();\n        return order === \"asc\" ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA);\n      });\n      setFilteredTransactions(sorted);\n    };\n\n  return (\n    <div>\n      <Search onSearch={handleSearch}/>\n      <AddTransactionForm transactions={transactions} addTransaction={addTransaction} />\n      <TransactionsList transactions={filteredTransactions} onDelete={handleDelete} onSort={handleSort}/>\n    </div>\n  );\n}\n\nexport default AccountContainer;"]},"metadata":{},"sourceType":"module"}